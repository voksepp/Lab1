Code overview:

Lab1A: binary search for int
Lab1B: generic binary search

MyIntSet and MyIntSortedArray are used in Lab1A.
MySet and MySortedArray are used in Lab1B.

-----
Documentation:

Documentation of individual functions, classes and methods is attached (Javadoc)

-----
Time complexity:

public boolean member(E element) {
        int iLow = 0;                               // O(1)
        int iHigh = eArray.length - 1;              // O(1)

        while (iLow <= iHigh) {                                 // for loop, average and max complexity: O(log_2 n) -> for entire method
            int iMid = (iLow + iHigh) >>> 1;        // O(1)     // Splits in half to optimize number of iterations needed
            E midVal = eArray[iMid];                // O(1)

            int diff = midVal.compareTo(element);   // O(1)
            if (diff < 0)                           // O(1)
                iLow = iMid + 1;
            else if (diff > 0)                      // O(1)
                iHigh = iMid - 1;
            else
                return true;                        // O(1)
        }
        return false;                               // O(1)
    }

Since the algorithm splits the index in half when searching
it is clear that the time complexity is O(log_2(n)).
Explanation: How many times can n be divided by 2 before it is equal to 1?
1 = n/(2^x) => 2^x = n => x*log_2(2) = log_2(n) => x = log_2(n).
Therefore O(log_2(n)).

Each iteration in the while loop takes constant time (O(1)), therefore the total
complexity is derived from the number of iterations (O(log_2(n))).

-----

Testing:

We believe our code is correct, it has been generically implemented and
the program accepts any array and behaves correctly as far as we have
been able to determine. In addition to using the supplied test file many
times we have also written our own test programs. We have tested a number
of different special cases, where the sought element is in the first,
last, and central positions in the array. The method has also been
adapted to be able to handle very large arrays.