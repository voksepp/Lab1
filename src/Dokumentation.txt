Översikt över kod:

Lab1A: binärsökning för int
Lab1B: generell binärsökning

MyIntSet och MyIntSortedArray tillhör Lab1A.
MySet och MySortedArray tillhör Lab1B.

-----
Dokumentation:

Dokumentation av individuella klasser, metoder, funktioner bifogas (Javadoc)

-----
Tidskomplexitet:

public boolean member(E element) {
        int iLow = 0;                               //First index in array
        int iHigh = eArray.length - 1;              //Last index in array

        while (iLow <= iHigh) {
            int iMid = (iLow + iHigh) >>> 1;        //Check in the middle
            E midVal = eArray[iMid];                //midVal is the value of eArray at index iMid

            int diff = midVal.compareTo(element);   //Compare and return -1, 0 or 1 if midval is lesser than, equal to or greater than element
            if (diff < 0)
                iLow = iMid + 1;                    //Check the upper half
            else if (diff > 0)
                iHigh = iMid - 1;                   //Check the lower half
            else
                return true;                        //Element is found
        }
        return false;                               //Element is not found
    }

Since the algorithm splits the index in half when searching
it is clear that the time complexity is O(log_2(n)).




-----

Testning:

Vi tror att vår kod är korrekt eftersom den är generellt implementerad
och därför kan programmet ta emot godtyckliga arrayer och köra
algoritmen utan att beteendet skiljer sig på något sätt. Till exempel
i olika fall där en textfil har varit både 0 lång och en textfil som är
upp emot 20 lång har programmet utfört och hittat (eller inte hittat)
sökt värde som väntat. Vi har testat många egna testfall och även kört
testprogrammet flera gånger med olika parametrar.


