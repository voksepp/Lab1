Översikt över kod:

Lab1A: binärsökning för int
Lab1B: generell binärsökning

MyIntSet och MyIntSortedArray tillhör Lab1A.
MySet och MySortedArray tillhör Lab1B.

-----
Dokumentation:

Dokumentation av individuella klasser, metoder, funktioner bifogas (Javadoc)

-----
Tidskomplexitet:

public boolean member(E element) {
        int iLow = 0;                               // O(1)
        int iHigh = eArray.length - 1;              // O(1)

        while (iLow <= iHigh) {                                 // för loop: O(log n)
            int iMid = (iLow + iHigh) >>> 1;        // O(1)
            E midVal = eArray[iMid];                // O(1)

            int diff = midVal.compareTo(element);   // O(1)
            if (diff < 0)                           // O(1)
                iLow = iMid + 1;
            else if (diff > 0)                      // O(1)
                iHigh = iMid - 1;
            else
                return true;                        // O(1)
        }
        return false;                               // O(1)
    }

Since the algorithm splits the index in half when searching
it is clear that the time complexity is O(log_2(n)).




-----

Testning:

Vi tror att vår kod är korrekt eftersom den är generellt implementerad
och därför kan programmet ta emot godtyckliga arrayer och köra
algoritmen utan att beteendet skiljer sig på något sätt. Till exempel
i olika fall där en textfil har varit både 0 lång och en textfil som är
upp emot 20 lång har programmet utfört och hittat (eller inte hittat)
sökt värde som väntat. Vi har testat många egna testfall och även kört
testprogrammet flera gånger med olika parametrar.


